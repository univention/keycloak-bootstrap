{{/*
SPDX-FileCopyrightText: 2023 Univention GmbH
SPDX-License-Identifier: AGPL-3.0-only
*/}}
---
apiVersion: "batch/v1"
kind: "Job"
metadata:
  name: "{{ include "common.names.fullname" . }}-bootstrap-{{ .Release.Revision }}"
  labels:
    {{- include "common.labels.standard" ( dict "customLabels" .Values.additionalLabels "context" . ) | nindent 4 }}
  {{- include "nubus-common.annotations.render" ( dict
    "values" ( list .Values.additionalAnnotations )
    "context" . )
    | nindent 2 }}
spec:
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" .) | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
    spec:
      restartPolicy: "Never"
      {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
        {{- range .Values.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      initContainers:
      - name: "wait-for-keycloak"
        {{- if .Values.containerSecurityContext.enabled }}
        securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
        image: "{{ .Values.waitForDependency.image.registry | default .Values.global.imageRegistry }}/{{ .Values.waitForDependency.image.repository }}{{ if .Values.waitForDependency.image.sha256 }}@sha256:{{ .Values.waitForDependency.image.sha256 }}{{ else }}:{{ .Values.waitForDependency.image.tag }}{{ end }}"
        imagePullPolicy: {{ coalesce .Values.waitForDependency.image.pullPolicy .Values.global.imagePullPolicy | quote }}
        envFrom:
          - configMapRef:
              name: {{ printf "%s-init" (include "common.names.fullname" .) }}
        {{- with .Values.extraEnvVars }}
          {{- . | toYaml | nindent 10 }}
        {{- end }}
        command: ["wait-for-keycloak.py"]
        {{- if .Values.resources }}
        resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources "context" .) | nindent 10 }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        volumeMounts:
          {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" .) | nindent 10 }}
        {{- end }}
      containers:
        - name: "main"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.registry | default .Values.global.imageRegistry }}/{{ .Values.image.repository }}{{ if .Values.image.sha256 }}@sha256:{{ .Values.image.sha256 }}{{ else }}:{{ .Values.image.tag }}{{ end }}"
          imagePullPolicy: {{ coalesce .Values.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - "/app/entrypoint.sh"
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" .  | quote }}
          env:
            - name: KEYCLOAK_USERNAME
              value: {{ tpl .Values.keycloak.auth.username . }}
            - name: KEYCLOAK_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ tpl .Values.keycloak.auth.existingSecret.name . }}
                  key: {{ include "common.secrets.key" (dict "existingSecret" .Values.keycloak.auth.existingSecret "key" "adminPassword") | quote }}
            - name: LDAP_BIND_DN
              value: {{ tpl .Values.ldap.auth.bindDn . }}
            - name: LDAP_BIND_PW
              valueFrom:
                secretKeyRef:
                  name: {{ tpl .Values.ldap.auth.existingSecret.name . }}
                  key: {{ include "common.secrets.key" (dict "existingSecret" .Values.ldap.auth.existingSecret "key" "password") | quote }}
            - name: UMC_OIDC_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.oidc.rp.umcserver.clientSecret.existingSecret "defaultNameSuffix" "oidc-rp-umc-server" "context" .) | quote }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.oidc.rp.umcserver.clientSecret.existingSecret "key" "password") | quote }}
          {{- with .Values.extraEnvVars }}
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: "/bootstrap"
              name: "bootstrap-volume"
            - mountPath: "/credentials/ldapread.secret"
              name: "ldap-credentials-volume"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.ldap.auth.existingSecret "key" "password") | quote }}
            - mountPath: "/credentials/keycloak.secret"
              name: "keycloak-credentials-volume"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.keycloak.auth.existingSecret "key" "adminPassword") | quote }}
            - mountPath: "/tmp"
              name: "temp-dir"
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" .) | nindent 12 }}
            {{- end }}
          {{- with .Values.resources }}
          resources:
            {{ toYaml . | nindent 12 | trim }}
          {{- end }}
      volumes:
        - name: "wait-for-keycloak"
          configMap:
            name: {{ printf "%s-init" (include "common.names.fullname" .) }}
        - name:  "keycloak-credentials-volume"
          secret:
            secretName: {{ tpl .Values.keycloak.auth.existingSecret.name . }}
        - name:  "ldap-credentials-volume"
          secret:
            secretName: {{ tpl .Values.ldap.auth.existingSecret.name . }}
        - name: "bootstrap-volume"
          configMap:
            name: {{ printf "%s-bootstrap-data" (include "common.names.fullname" .) | quote }}
        - name: "temp-dir"
          emptyDir:
            sizeLimit: "20Mi"
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes  "context" .) | nindent 8 }}
        {{- end }}
...
