# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH

---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: "{{ include "common.names.fullname" . }}"
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  DEBUG: {{ .Values.config.debug.enabled | quote }}
  DOMAIN: {{ .Values.global.domain | quote }}
  SUBDOMAIN_PORTAL: {{ .Values.global.subDomains.portal | quote }}
  KEYCLOAK_HOST: {{ include "keycloak-bootstrap.keycloak.connection.host" . | quote }}
  KEYCLOAK_REALM: {{ include "keycloak-bootstrap.keycloak.auth.realm" . | quote }}
  KEYCLOAK_URL: {{ include "keycloak-bootstrap.keycloak.connection.baseUrl" . | quote }}
  UNIVENTION_KEYCLOAK_BOOTSTRAP_TEMP_DIR: "/tmp"
  UNIVENTION_KEYCLOAK_BOOTSTRAP_DEBUG_PAUSE_BEFORE_SCRIPT_START: {{ .Values.config.debug.pauseBeforeScriptStart  | quote }}
  LDAP_BASE_DN: {{ include "keycloak-bootstrap.ldap.baseDn" . | quote }}
  LDAP_URI: {{ include "keycloak-bootstrap.ldap.connection.uri" . | quote }}
  SAML_SERVICE_PROVIDER_HOSTNAME: {{ include "keycloak-bootstrap.saml.serviceProviderHostname" . | quote }}
...

---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: {{ printf "%s-bootstrap-data" (include "common.names.fullname" .) | quote }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  ldap.mappers.yaml: |
    {{ .Values.bootstrap.ldapMappers | toYaml | nindent 4 }}
  loginlinks.yaml: |
  {{ if gt (len .Values.bootstrap.loginLinks) 0 }}
    {{ .Values.bootstrap.loginLinks | toYaml | nindent 4 }}
  {{ else }}
    - link_number: 1
      language: "de"
      description: "Passwort vergessen?"
      href: "https://{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}/univention/portal/#/selfservice/passwordforgotten"
    - link_number: 1
      language: "en"
      description: "Forgot password?"
      href: "https://{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}/univention/portal/#/selfservice/passwordforgotten"
  {{ end }}
  2fa.yaml: |
    {{ .Values.bootstrap.twoFactorAuthentication | toYaml | nindent 4 }}
...

---
apiVersion: "v1"
kind: ConfigMap
metadata:
  name: {{ printf "%s-init" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  KEYCLOAK_URL: {{ include "keycloak-bootstrap.keycloak.connection.master.url" . | quote }}
  wait-for-keycloak.py: |
    #!/usr/bin/python3
    import requests
    import time
    import sys
    import os

    keycloak_url = os.environ.get('KEYCLOAK_URL')
    max_retries = 60
    retries = 0

    while True:
        try:
            response = requests.get(keycloak_url)
            if response.status_code == 200:
                print('Keycloak is available')
                sys.exit(0)
            elif response.status_code == 404:
                print('Realm not ready')
                pass
        except requests.exceptions.ConnectionError:
            print('Could not reach keycloak, retrying...')
            pass
        time.sleep(1)
...
